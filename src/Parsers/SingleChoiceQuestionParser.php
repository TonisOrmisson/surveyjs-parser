<?php

declare(strict_types=1);

namespace Collecthor\SurveyjsParser\Parsers;

use Collecthor\SurveyjsParser\ElementParserInterface;
use Collecthor\SurveyjsParser\Interfaces\ClosedVariableInterface;
use Collecthor\SurveyjsParser\Interfaces\SpecialValueInterface;
use Collecthor\SurveyjsParser\Interfaces\ValueOptionInterface;
use Collecthor\SurveyjsParser\Interfaces\VariableInterface;
use Collecthor\SurveyjsParser\ResolvableVariableSet;
use Collecthor\SurveyjsParser\SurveyConfiguration;
use Collecthor\SurveyjsParser\Values\IntegerValueOption;
use Collecthor\SurveyjsParser\Variables\DeferredVariable;
use Collecthor\SurveyjsParser\Variables\SingleChoiceVariable;
use ValueError;

use function Collecthor\SurveyjsParser\Helpers\extractName;
use function Collecthor\SurveyjsParser\Helpers\extractOptionalInteger;
use function Collecthor\SurveyjsParser\Helpers\extractTitles;
use function Collecthor\SurveyjsParser\Helpers\extractValueName;
use function Collecthor\SurveyjsParser\Helpers\generateChoices;

final readonly class SingleChoiceQuestionParser implements ElementParserInterface
{
    public function parse(
        ElementParserInterface $root,
        array $questionConfig,
        SurveyConfiguration $surveyConfiguration,
        array $dataPrefix = []
    ): iterable {
        $dataPath = [...$dataPrefix, extractValueName($questionConfig)];
        $name = implode('.', [...$dataPrefix, extractName($questionConfig)]);
        $titles = extractTitles($questionConfig);

        // choicesFromQuestion
        if (isset($questionConfig['choicesFromQuestion']) && is_string($questionConfig['choicesFromQuestion'])) {
            yield new DeferredVariable(
                $name,
                static function (ResolvableVariableSet $set) use ($name, $titles, $dataPath, $questionConfig): VariableInterface {
                    $variable = $set->getVariable($questionConfig['choicesFromQuestion']);
                    if ($variable instanceof ClosedVariableInterface) {
                        return new SingleChoiceVariable(
                            name: $name,
                            options: array_values(array_filter($variable->getOptions(), function (ValueOptionInterface $option) {
                                return !$option instanceof SpecialValueInterface;
                            })),
                            dataPath: $dataPath,
                            rawConfiguration: $questionConfig,
                            titles: $titles
                        );
                    } else {
                        throw new ValueError("Question {$questionConfig['choicesFromQuestion']} does not have choices");
                    }
                },
            );
        } else {
            // Parse the answer options.
            $choices = generateChoices($questionConfig);

            // Add autogenerated options
            $max = extractOptionalInteger($questionConfig, 'choicesMax');
            if (isset($max)) {
                $min = extractOptionalInteger($questionConfig, 'choicesMin') ?? 0;
                $step = extractOptionalInteger($questionConfig, 'choicesStep') ?? 1;
                for ($i = $min;  $i < $max; $i += $step) {
                    $choices[] = new IntegerValueOption($i, ['default' => (string) $i]);
                }
            }
            yield new SingleChoiceVariable(
                $name,
                options: $choices,
                dataPath: $dataPath,
                rawConfiguration: $questionConfig,
                titles: $titles
            );
        }
        yield from (new CommentParser())->parse($questionConfig, $surveyConfiguration, $dataPrefix);
    }
}
